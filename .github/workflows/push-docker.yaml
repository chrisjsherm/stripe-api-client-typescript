name: Docker image build and publish
on:
  workflow_dispatch:
    inputs:
      path_to_dockerfile:
        description: Path to the dockerfile
        default: "Dockerfile"
        type: string
      docker_build_dir:
        description: Docker build directory
        default: "."
        type: string
      image_tag:
        description: Tag to apply to images.
        type: string
        default: "latest"
      lifecycle_policy_file:
        description: Path to the ECR image lifecycle policy
        default: "ecr-lifecycle-policy.json"
        type: string
      backend_s3_bucket:
        description: Name of the S3 bucket for Terraform backend
        default: "medspaah"
        type: string
      backend_dynamodb_table:
        description: DynamoDB table for State lock
        default: "medspaah_github-actions"
        type: string
      github_iam_role:
        description: Name of the IAM Role for GitHub Actions to assume
        default: "GitHubActionsManageECR"
        type: string
      aws_account_id:
        description: AWS Account ID
        default: "258996848737"
        type: string
      aws_region:
        description: Target AWS Region
        default: "us-east-1"
        type: string

# concurrency required to avoid terraform lock contention during ECR provisioning
concurrency: ci-${{ github.repository }}-docker-pipeline

jobs:
  docker:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    outputs:
      image_tag: ${{ steps.build-publish.outputs.image_tag }}
      full_image: ${{ steps.build-publish.outputs.full_image }}

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ inputs.aws_account_id }}:role/${{ inputs.github_iam_role }}
          aws-region: ${{ inputs.aws_region }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Prepare ECR repo name based on the Github repository
        shell: bash
        run: |
          set -eux
          # lowercase the name
          repo="${GITHUB_REPOSITORY,,}"

          # replace / with _
          echo "ECR_REPO_NAME=${repo//\//_}" >> $GITHUB_ENV

      - name: TF init
        shell: bash
        run: |
          set -eux
          terraform init -upgrade -reconfigure \
            -backend-config='skip_metadata_api_check=true' \
            -backend-config='skip_region_validation=true' \
            -backend-config='skip_credentials_validation=true' \
            -backend-config='region=${{ inputs.aws_region }}' \
            -backend-config='bucket=${{ inputs.backend_s3_bucket }}' \
            -backend-config='key=docker-ecr/terraform-${{ env.ECR_REPO_NAME }}.tfstate' \
            -backend-config='dynamodb_table=${{ inputs.backend_dynamodb_table }}' \
        working-directory: terraform

      - name: Create ECR repo [TF apply]
        shell: bash
        run: |
          set -eux
          terraform apply \
            -var 'repository_name=${{ env.ECR_REPO_NAME }}' \
            -var 'lifecycle_policy=${{ inputs.lifecycle_policy_file }}' \
            -var 'aws_account_id=${{ inputs.aws_account_id }}' \
            -var 'iam_role=${{ inputs.github_iam_role }}' \
            -auto-approve
        working-directory: terraform

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: ${{ inputs.aws_account_id }}

      - name: Build, tag, and push image to Amazon ECR
        id: build-publish
        shell: bash
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPO_NAME }}
          IMAGE_TAG: ${{ inputs.image_tag }}
          AUTH_ADMIN_EMAIL: ${{secrets.AUTH_ADMIN_EMAIL}},
          AUTH_ADMIN_PASSWORD: ${{secrets.AUTH_ADMIN_PASSWORD}},
          AUTH_API_KEY__APP_SERVER: ${{secrets.AUTH_API_KEY__APP_SERVER}},
          AUTH_API_KEY__SUPER_ADMIN: ${{secrets.AUTH_API_KEY__SUPER_ADMIN}},
          AUTH_APPLICATION_ID: ${{secrets.AUTH_APPLICATION_ID}},
          AUTH_APPLICATION_NAME: ${{secrets.AUTH_APPLICATION_NAME}},
          AUTH_ASYMMETRIC_KEY_ID: ${{secrets.AUTH_ASYMMETRIC_KEY_ID}},
          AUTH_CONTAINER_URL: ${{secrets.AUTH_CONTAINER_URL}},
          AUTH_DATABASE_PASSWORD: ${{secrets.AUTH_DATABASE_PASSWORD}},
          AUTH_DATABASE_USERNAME: ${{secrets.AUTH_DATABASE_USERNAME}},
          AUTH_DEFAULT_TENANT_ID: ${{secrets.AUTH_DEFAULT_TENANT_ID}},
          AUTH_EMAIL_HOST: ${{secrets.AUTH_EMAIL_HOST}},
          AUTH_EMAIL_PORT: ${{secrets.AUTH_EMAIL_PORT}},
          AUTH_EMAIL_TEMPLATE_FROM_ADDRESS: ${{secrets.AUTH_EMAIL_TEMPLATE_FROM_ADDRESS}},
          AUTH_EMAIL_TEMPLATE_FROM_NAME: ${{secrets.AUTH_EMAIL_TEMPLATE_FROM_NAME}},
          AUTH_EXTERNAL_URL: ${{secrets.AUTH_EXTERNAL_URL}},
          AUTH_FUSIONAUTH_APP_KICKSTART_FILE: ${{secrets.AUTH_FUSIONAUTH_APP_KICKSTART_FILE}},
          AUTH_FUSIONAUTH_APP_MEMORY: ${{secrets.AUTH_FUSIONAUTH_APP_MEMORY}},
          AUTH_FUSIONAUTH_APP_RUNTIME_MODE: ${{secrets.AUTH_FUSIONAUTH_APP_RUNTIME_MODE}},
          AUTH_GROUP__ORGANIZATION_ADMINISTRATORS_ID: ${{secrets.AUTH_GROUP__ORGANIZATION_ADMINISTRATORS_ID}},
          AUTH_GROUP__SUBSCRIPTION_BUSINESS_ANNUAL_ID: ${{secrets.AUTH_GROUP__SUBSCRIPTION_BUSINESS_ANNUAL_ID}},
          AUTH_GROUP__SUBSCRIPTION_STARTUP_ANNUAL_ID: ${{secrets.AUTH_GROUP__SUBSCRIPTION_STARTUP_ANNUAL_ID}},
          AUTH_GROUP_ID__ORGANIZATION_ADMINISTRATORS: ${{secrets.AUTH_GROUP_ID__ORGANIZATION_ADMINISTRATORS}},
          AUTH_GROUP_ID__PATIENTS: ${{secrets.AUTH_GROUP_ID__PATIENTS}},
          AUTH_GROUP_ID__SUBSCRIPTION_BUSINESS_ANNUAL_REV_0: ${{secrets.AUTH_GROUP_ID__SUBSCRIPTION_BUSINESS_ANNUAL_REV_0}},
          AUTH_GROUP_ID__SUBSCRIPTION_STARTUP_ANNUAL_REV_0: ${{secrets.AUTH_GROUP_ID__SUBSCRIPTION_STARTUP_ANNUAL_REV_0}},
          AUTH_LOGOUT_URL: ${{secrets.AUTH_LOGOUT_URL}},
          AUTH_ROLE__BTX_ASSISTANT_READ_WRITE_ID: ${{secrets.AUTH_ROLE__BTX_ASSISTANT_READ_WRITE_ID}},
          AUTH_ROLE__BTX_ASSISTANT_READ_WRITE_NAME: ${{secrets.AUTH_ROLE__BTX_ASSISTANT_READ_WRITE_NAME}},
          AUTH_ROLE__ORGANIZATION_ADMINISTRATOR_ID: ${{secrets.AUTH_ROLE__ORGANIZATION_ADMINISTRATOR_ID}},
          AUTH_ROLE__ORGANIZATION_ADMINISTRATOR_NAME: ${{secrets.AUTH_ROLE__ORGANIZATION_ADMINISTRATOR_NAME}},
          AUTH_WEBHOOK_URL: ${{secrets.AUTH_WEBHOOK_URL}},
          AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}},
          AWS_REGION: ${{secrets.AWS_REGION}},
          AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}},
          CAPTCHA_ENABLED: ${{secrets.CAPTCHA_ENABLED}},
          CAPTCHA_SECRET_KEY_AWS_SSM_PARAMETER_PATH: ${{secrets.CAPTCHA_SECRET_KEY_AWS_SSM_PARAMETER_PATH}},
          CUSTOMER_CONTACT_SUBJECT_SUFFIX: ${{secrets.CUSTOMER_CONTACT_SUBJECT_SUFFIX}},
          CUSTOMER_CONTACT_TO_AWS_SES_VALIDATED_EMAIL: ${{secrets.CUSTOMER_CONTACT_TO_AWS_SES_VALIDATED_EMAIL}},
          DB_HOST: ${{secrets.DB_HOST}},
          DB_NAME: ${{secrets.DB_NAME}},
          DB_PASSWORD: ${{secrets.DB_PASSWORD}},
          DB_PORT: ${{secrets.DB_PORT}},
          DB_USERNAME: ${{secrets.DB_USERNAME}},
          OPENSEARCH_INITIAL_ADMIN_PASSWORD: ${{secrets.OPENSEARCH_INITIAL_ADMIN_PASSWORD}},
          PG_ADMIN_DEFAULT_USER_EMAIL: ${{secrets.PG_ADMIN_DEFAULT_USER_EMAIL}},
          PG_ADMIN_DEFAULT_USER_PASSWORD: ${{secrets.PG_ADMIN_DEFAULT_USER_PASSWORD}},
          PG_ADMIN_PORT: ${{secrets.PG_ADMIN_PORT}},
          STRIPE_API_KEY: ${{secrets.STRIPE_API_KEY}},
          STRIPE_WEBHOOK_SIGNING_KEY: ${{secrets.STRIPE_WEBHOOK_SIGNING_KEY}},
          UI_ORIGIN: ${{secrets.UI_ORIGIN}},
          WEB_API_PAYLOAD_LIMIT: ${{secrets.WEB_API_PAYLOAD_LIMIT}},
          WEB_API_REQUEST_TIMEOUT_MS: ${{secrets.WEB_API_REQUEST_TIMEOUT_MS}},
          WEB_API_RETRY_DELAY_MS: ${{secrets.WEB_API_RETRY_DELAY_MS}},
          WEB_API_SERVER_PORT: ${{secrets.WEB_API_SERVER_PORT}},
          WEB_API_UPSERT_SEED_DATA: ${{secrets.WEB_API_UPSERT_SEED_DATA}},

        run: |
          docker build \
            --build-arg AUTH_ADMIN_EMAIL="${AUTH_ADMIN_EMAIL}" \
            --build-arg AUTH_ADMIN_PASSWORD="${AUTH_ADMIN_PASSWORD}" \
            --build-arg AUTH_API_KEY__APP_SERVER="${AUTH_API_KEY__APP_SERVER}" \
            --build-arg AUTH_API_KEY__SUPER_ADMIN="${AUTH_API_KEY__SUPER_ADMIN}" \
            --build-arg AUTH_APPLICATION_ID="${AUTH_APPLICATION_ID}" \
            --build-arg AUTH_APPLICATION_NAME="${AUTH_APPLICATION_NAME}" \
            --build-arg AUTH_ASYMMETRIC_KEY_ID="${AUTH_ASYMMETRIC_KEY_ID}" \
            --build-arg AUTH_CONTAINER_URL="${AUTH_CONTAINER_URL}" \
            --build-arg AUTH_DATABASE_PASSWORD="${AUTH_DATABASE_PASSWORD}" \
            --build-arg AUTH_DATABASE_USERNAME="${AUTH_DATABASE_USERNAME}" \
            --build-arg AUTH_DEFAULT_TENANT_ID="${AUTH_DEFAULT_TENANT_ID}" \
            --build-arg AUTH_EMAIL_HOST="${AUTH_EMAIL_HOST}" \
            --build-arg AUTH_EMAIL_PORT="${AUTH_EMAIL_PORT}" \
            --build-arg AUTH_EMAIL_TEMPLATE_FROM_ADDRESS="${AUTH_EMAIL_TEMPLATE_FROM_ADDRESS}" \
            --build-arg AUTH_EMAIL_TEMPLATE_FROM_NAME="${AUTH_EMAIL_TEMPLATE_FROM_NAME}" \
            --build-arg AUTH_EXTERNAL_URL="${AUTH_EXTERNAL_URL}" \
            --build-arg AUTH_FUSIONAUTH_APP_KICKSTART_FILE="${AUTH_FUSIONAUTH_APP_KICKSTART_FILE}" \
            --build-arg AUTH_FUSIONAUTH_APP_MEMORY="${AUTH_FUSIONAUTH_APP_MEMORY}" \
            --build-arg AUTH_FUSIONAUTH_APP_RUNTIME_MODE="${AUTH_FUSIONAUTH_APP_RUNTIME_MODE}" \
            --build-arg AUTH_GROUP__ORGANIZATION_ADMINISTRATORS_ID="${AUTH_GROUP__ORGANIZATION_ADMINISTRATORS_ID}" \
            --build-arg AUTH_GROUP__SUBSCRIPTION_BUSINESS_ANNUAL_ID="${AUTH_GROUP__SUBSCRIPTION_BUSINESS_ANNUAL_ID}" \
            --build-arg AUTH_GROUP__SUBSCRIPTION_STARTUP_ANNUAL_ID="${AUTH_GROUP__SUBSCRIPTION_STARTUP_ANNUAL_ID}" \
            --build-arg AUTH_GROUP_ID__ORGANIZATION_ADMINISTRATORS="${AUTH_GROUP_ID__ORGANIZATION_ADMINISTRATORS}" \
            --build-arg AUTH_GROUP_ID__PATIENTS="${AUTH_GROUP_ID__PATIENTS}" \
            --build-arg AUTH_GROUP_ID__SUBSCRIPTION_BUSINESS_ANNUAL_REV_0="${AUTH_GROUP_ID__SUBSCRIPTION_BUSINESS_ANNUAL_REV_0}" \
            --build-arg AUTH_GROUP_ID__SUBSCRIPTION_STARTUP_ANNUAL_REV_0="${AUTH_GROUP_ID__SUBSCRIPTION_STARTUP_ANNUAL_REV_0}" \
            --build-arg AUTH_LOGOUT_URL="${AUTH_LOGOUT_URL}" \
            --build-arg AUTH_ROLE__BTX_ASSISTANT_READ_WRITE_ID="${AUTH_ROLE__BTX_ASSISTANT_READ_WRITE_ID}" \
            --build-arg AUTH_ROLE__BTX_ASSISTANT_READ_WRITE_NAME="${AUTH_ROLE__BTX_ASSISTANT_READ_WRITE_NAME}" \
            --build-arg AUTH_ROLE__ORGANIZATION_ADMINISTRATOR_ID="${AUTH_ROLE__ORGANIZATION_ADMINISTRATOR_ID}" \
            --build-arg AUTH_ROLE__ORGANIZATION_ADMINISTRATOR_NAME="${AUTH_ROLE__ORGANIZATION_ADMINISTRATOR_NAME}" \
            --build-arg AUTH_WEBHOOK_URL="${AUTH_WEBHOOK_URL}" \
            --build-arg AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}" \
            --build-arg AWS_REGION="${AWS_REGION}" \
            --build-arg AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}" \
            --build-arg CAPTCHA_ENABLED="${CAPTCHA_ENABLED}" \
            --build-arg CAPTCHA_SECRET_KEY_AWS_SSM_PARAMETER_PATH="${CAPTCHA_SECRET_KEY_AWS_SSM_PARAMETER_PATH}" \
            --build-arg CUSTOMER_CONTACT_SUBJECT_SUFFIX="${CUSTOMER_CONTACT_SUBJECT_SUFFIX}" \
            --build-arg CUSTOMER_CONTACT_TO_AWS_SES_VALIDATED_EMAIL="${CUSTOMER_CONTACT_TO_AWS_SES_VALIDATED_EMAIL}" \
            --build-arg DB_HOST="${DB_HOST}" \
            --build-arg DB_NAME="${DB_NAME}" \
            --build-arg DB_PASSWORD="${DB_PASSWORD}" \
            --build-arg DB_PORT="${DB_PORT}" \
            --build-arg DB_USERNAME="${DB_USERNAME}" \
            --build-arg OPENSEARCH_INITIAL_ADMIN_PASSWORD="${OPENSEARCH_INITIAL_ADMIN_PASSWORD}" \
            --build-arg PG_ADMIN_DEFAULT_USER_EMAIL="${PG_ADMIN_DEFAULT_USER_EMAIL}" \
            --build-arg PG_ADMIN_DEFAULT_USER_PASSWORD="${PG_ADMIN_DEFAULT_USER_PASSWORD}" \
            --build-arg PG_ADMIN_PORT="${PG_ADMIN_PORT}" \
            --build-arg STRIPE_API_KEY="${STRIPE_API_KEY}" \
            --build-arg STRIPE_WEBHOOK_SIGNING_KEY="${STRIPE_WEBHOOK_SIGNING_KEY}" \
            --build-arg UI_ORIGIN="${UI_ORIGIN}" \
            --build-arg WEB_API_PAYLOAD_LIMIT="${WEB_API_PAYLOAD_LIMIT}" \
            --build-arg WEB_API_REQUEST_TIMEOUT_MS="${WEB_API_REQUEST_TIMEOUT_MS}" \
            --build-arg WEB_API_RETRY_DELAY_MS="${WEB_API_RETRY_DELAY_MS}" \
            --build-arg WEB_API_SERVER_PORT="${WEB_API_SERVER_PORT}" \
            --build-arg WEB_API_UPSERT_SEED_DATA="${WEB_API_UPSERT_SEED_DATA}" \
            "${{ inputs.docker_build_dir }}" -f "${{ inputs.path_to_dockerfile }}" \
            -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "IMAGE $IMAGE_TAG is pushed to $ECR_REGISTRY/$ECR_REPOSITORY"
          echo "image_tag=$IMAGE_TAG" 
          echo "full_image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
