AWSTemplateFormatVersion: '2010-09-09'
Description: Launch an EC2 instance with custom storage and monitoring

Parameters:
  InstanceAMI:
    Description: EC2 Image ID
    Type: String
    Default: ami-0ba9883b710b05ac6
    ConstraintDescription: must be a valid ID in the target region

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.medium
    ConstraintDescription: must be a valid EC2 instance type.

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  SecurityGroupCidrIp:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    Default: 0.0.0.0/0
    MinLength: "9"
    MaxLength: "18"
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  SubnetId:
    Description: The subnet ID to launch the instance in
    Type: AWS::EC2::Subnet::Id

  VolumeSize:
    Description: The size of the EBS volume in GB
    Type: Number
    Default: 20
    MinValue: 8
    MaxValue: 1024

  VpcId:
    Description: The VPC ID to launch the instance in
    Type: AWS::EC2::VPC::Id

Resources:
  RoleEC2InstanceAccess:
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: "ec2.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies: 
        - PolicyName: "SSMParameterStorePolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action: 
                  - "ssm:GetParameter"
                  - "ssm:GetParameters"
                  - "ssm:GetParametersByPath"
                Resource: "arn:aws:ssm:*:*:parameter/*"
        - PolicyName: "SESPolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action: 
                  - "ses:SendEmail"
                  - "ses:SendRawEmail"
                Resource: "*"
        - PolicyName: "ECRPullPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetAuthorizationToken"
                Resource: "*"
        - PolicyName: "CloudWatchAgentPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "cloudwatch:PutMetricData"
                  - "ssm:GetParameter"
                  - "ssm:GetParameters"
                  - "ssm:GetParametersByPath"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:CreateLogGroup"
                  - "logs:DescribeLogStreams"
                Resource: "*"

  EC2Profile:
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Roles: 
        - Ref: "RoleEC2InstanceAccess"

  EC2Instance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - 01_setupCfnHup
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
            - 04_setupDocker
          UpdateEnvironment:
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent

        # Definition of json configuration of AmazonCloudWatchAgent, you can change the configuration below.
        02_config-amazon-cloudwatch-agent:
          files:
            /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json:
              content: |
                {
                  "metrics": {
                    "append_dimensions": {
                      "ImageId": "${!aws:ImageId}",
                      "InstanceId": "${!aws:InstanceId}",
                      "InstanceType": "${!aws:InstanceType}"
                    },
                    "metrics_collected": {
                      "mem": {
                        "measurement": [
                          "mem_used_percent"
                        ]
                      },
                      "swap": {
                        "measurement": [
                          "swap_used_percent"
                        ]
                      }
                    }
                  }
                }

        # Invoke amazon-cloudwatch-agent-ctl to restart the AmazonCloudWatchAgent.
        03_restart_amazon-cloudwatch-agent:
          commands:
            01_stop_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop
            02_start_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s

        # Start Docker services automatically at boot
        04_setupDocker:
          commands:
            01_enable_docker:
              command: systemctl enable docker
            02_enable_containerd:
              command: systemctl enable containerd.service

        # Cfn-hup setting, it is to monitor the change of metadata.
        # When there is change in the contents of json file in the metadata section, cfn-hup will call cfn-init to restart the AmazonCloudWatchAgent.
        01_setupCfnHup:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/hooks.d/amazon-cloudwatch-agent-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init.02_config-amazon-cloudwatch-agent
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource EC2Instance --region ${AWS::Region} --configsets UpdateEnvironment
                runas=root
              mode: "000400"
              owner: root
              group: root
            /lib/systemd/system/cfn-hup.service:
              content: |
                [Unit]
                Description=cfn-hup daemon
                [Service]
                Type=simple
                ExecStart=/opt/aws/bin/cfn-hup
                Restart=always
                [Install]
                WantedBy=multi-user.target
          commands:
            01enable_cfn_hup:
              command: systemctl enable cfn-hup.service
            02start_cfn_hup:
              command: systemctl start cfn-hup.service
    Properties: 
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SubnetId: !Ref SubnetId
      SecurityGroupIds: 
        - !Ref InstanceSecurityGroup
      ImageId: !Ref InstanceAMI
      IamInstanceProfile:
        Ref: "EC2Profile"
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: !Ref VolumeSize
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -x  # Enable debugging
          exec > >(tee /var/log/user-data.log|logger -t user-data) 2>&1

          yum update -y
          yum install -y amazon-cloudwatch-agent
          yum install -y docker
          service docker start
          usermod -a -G docker ec2-user
          docker --version
          curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          docker-compose --version

          rpm -Uvh https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource EC2Instance --region ${AWS::Region} --configsets default
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource EC2Instance --region ${AWS::Region}

          echo "UserData script completed"

  ElasticIP:
    Type: AWS::EC2::EIP

  EIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref EC2Instance
      EIP: !Ref ElasticIP

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Enable SSH access and open ports for services
      VpcId: !Ref VpcId
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SecurityGroupCidrIp
          Description: "SSH"
        - IpProtocol: tcp
          FromPort: 4242
          ToPort: 4242
          Description: "Web API"
          CidrIp: !Ref SecurityGroupCidrIp
        - IpProtocol: tcp
          FromPort: 8025
          ToPort: 8025
          Description: "Mail Hog"
          CidrIp: !Ref SecurityGroupCidrIp
        - IpProtocol: tcp
          FromPort: 9011
          ToPort: 9011
          CidrIp: !Ref SecurityGroupCidrIp
          Description: "FusionAuth"

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if CPU usage exceeds 80%"
      Namespace: "AWS/EC2"
      MetricName: "CPUUtilization"
      Dimensions:
        - Name: "InstanceId"
          Value: !Ref EC2Instance
      Statistic: "Average"
      Period: "300"
      EvaluationPeriods: "1"
      Threshold: "80"
      ComparisonOperator: "GreaterThanThreshold"
      AlarmActions:
        - "arn:aws:sns:us-east-1:123456789012:MySNSTopic"

  MemoryAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if memory usage exceeds 80%"
      Namespace: "CWAgent"
      MetricName: "mem_used_percent"
      Dimensions:
        - Name: "InstanceId"
          Value: !Ref EC2Instance
      Statistic: "Average"
      Period: "300"
      EvaluationPeriods: "1"
      Threshold: "80"
      ComparisonOperator: "GreaterThanThreshold"
      AlarmActions:
        - "arn:aws:sns:us-east-1:123456789012:MySNSTopic"

Outputs:
  InstanceId:
    Description: Instance ID of the newly created EC2 instance
    Value: !Ref EC2Instance
  PublicIP:
    Description: Public IP address of the EC2 instance
    Value: !GetAtt EC2Instance.PublicIp
