AWSTemplateFormatVersion: '2010-09-09'
Description: Launch an EC2 instance with custom storage and monitoring

Parameters:
  ImageId:
    Description: EC2 Image ID
    Type: String
    ConstraintDescription: must be a valid ID in the target region

  InstanceType:
    Description: EC2 instance type
    Type: String
    ConstraintDescription: must be a valid EC2 instance type.

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  SecurityGroupCidrIp:
    Type: String
    Description: "The IP address range that can access the instance (e.g., x.x.x.x/32)"

  SubnetId:
    Description: The subnet ID to launch the instance in
    Type: AWS::EC2::Subnet::Id

  VolumeSize:
    Description: The size of the EBS volume in GB
    Type: Number
    Default: 20
    MinValue: 8
    MaxValue: 1024

  VpcId:
    Description: The VPC ID to launch the instance in
    Type: AWS::EC2::VPC::Id

Resources:
  RoleEC2InstanceAccess:
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: "ec2.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies: 
        - PolicyName: "SSMParameterStorePolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action: 
                  - "ssm:GetParameter"
                  - "ssm:GetParameters"
                  - "ssm:GetParametersByPath"
                Resource: "arn:aws:ssm:*:*:parameter/*"
        - PolicyName: "SESPolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action: 
                  - "ses:SendEmail"
                  - "ses:SendRawEmail"
                Resource: "*"
        - PolicyName: "ECRPullPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetAuthorizationToken"
                Resource: "*"
        - PolicyName: "CloudWatchAgentPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "cloudwatch:PutMetricData"
                  - "ssm:GetParameter"
                  - "ssm:GetParameters"
                  - "ssm:GetParametersByPath"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:CreateLogGroup"
                  - "logs:DescribeLogStreams"
                Resource: "*"

  EC2Profile:
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Roles: 
        - Ref: "RoleEC2InstanceAccess"

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties: 
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SubnetId: !Ref SubnetId
      SecurityGroupIds: 
        - !Ref InstanceSecurityGroup
      ImageId: !Ref ImageId
      IamInstanceProfile:
        Ref: "EC2Profile"
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: !Ref VolumeSize
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -x  # Enable debugging
          exec > >(tee /var/log/user-data.log|logger -t user-data) 2>&1

          yum update -y
          yum install -y amazon-cloudwatch-agent
          yum install -y docker
          service docker start
          systemctl enable docker
          systemctl enable containerd.service
          usermod -a -G docker ec2-user
          docker --version
          curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          docker-compose --version

          mkdir -p /opt/aws/amazon-cloudwatch-agent/etc
          echo '{' > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
          echo '  "metrics": {' >> /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
          echo '    "metrics_collected": {' >> /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
          echo '      "mem": {' >> /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
          echo '        "measurement": [' >> /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
          echo '          "mem_used_percent"' >> /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
          echo '        ],' >> /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
          echo '        "metrics_collection_interval": 60' >> /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
          echo '      }' >> /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
          echo '    },' >> /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
          echo '    "append_dimensions": {' >> /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
          echo '      "InstanceId": "${!Ref EC2Instance}"' >> /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
          echo '    }' >> /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
          echo '  }' >> /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
          echo '}' >> /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json

          cat /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json

          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s

          echo "UserData script completed"

  ElasticIP:
    Type: AWS::EC2::EIP

  EIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref EC2Instance
      EIP: !Ref ElasticIP

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Enable SSH access and open ports for services
      VpcId: !Ref VpcId
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SecurityGroupCidrIp
          Description: "SSH"
        - IpProtocol: tcp
          FromPort: 4242
          ToPort: 4242
          Description: "Web API"
          CidrIp: !Ref SecurityGroupCidrIp
        - IpProtocol: tcp
          FromPort: 8025
          ToPort: 8025
          Description: "Mail Hog"
          CidrIp: !Ref SecurityGroupCidrIp
        - IpProtocol: tcp
          FromPort: 9011
          ToPort: 9011
          CidrIp: !Ref SecurityGroupCidrIp
          Description: "FusionAuth"

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if CPU usage exceeds 80%"
      Namespace: "AWS/EC2"
      MetricName: "CPUUtilization"
      Dimensions:
        - Name: "InstanceId"
          Value: !Ref EC2Instance
      Statistic: "Average"
      Period: "300"
      EvaluationPeriods: "1"
      Threshold: "80"
      ComparisonOperator: "GreaterThanThreshold"
      AlarmActions:
        - "arn:aws:sns:us-east-1:123456789012:MySNSTopic"

  MemoryAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if memory usage exceeds 80%"
      Namespace: "CWAgent"
      MetricName: "mem_used_percent"
      Dimensions:
        - Name: "InstanceId"
          Value: !Ref EC2Instance
      Statistic: "Average"
      Period: "300"
      EvaluationPeriods: "1"
      Threshold: "80"
      ComparisonOperator: "GreaterThanThreshold"
      AlarmActions:
        - "arn:aws:sns:us-east-1:123456789012:MySNSTopic"

Outputs:
  InstanceId:
    Description: Instance ID of the newly created EC2 instance
    Value: !Ref EC2Instance
  PublicIP:
    Description: Public IP address of the EC2 instance
    Value: !GetAtt EC2Instance.PublicIp
